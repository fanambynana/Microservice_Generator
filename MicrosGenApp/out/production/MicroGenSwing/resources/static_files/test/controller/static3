    }

    @Test
    void testGetById_EntityNotFoundException_ShouldReturnNotFound() throws Exception {
        when(${lowercase_model_name}Service.getById(any())).thenThrow(new EntityNotFoundException("${model_name} not found"));

        mockMvc.perform(get("${controller_api}/"+Static${model_name}.ID))
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$.errorMessage").value("${model_name} not found"))
                .andExpect(jsonPath("$.timestamp").exists());
    }

    @Test
    void testGetById_AnyException_ShouldReturnBadRequest() throws Exception {
        doThrow(new DataAccessException("Database connection failed") {}).when(${lowercase_model_name}Service).getById(any());

        mockMvc.perform(get("${controller_api}/"+Static${model_name}.ID))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.errorMessage").value("Database connection failed"))
                .andExpect(jsonPath("$.timestamp").exists());
    }


    @Test
    void testGetAll_Success_ShouldReturnOk() throws Exception {
        List<${class_name}> ${lowercase_model_name}List = Arrays.asList(${lowercase_model_name}Model, Static${model_name}.${lowercase_model_name}1());
        Page<${class_name}> ${lowercase_model_name}Page = new PageImpl<>(${lowercase_model_name}List);
        Pageable pageable = Pageable.unpaged();
        when(${lowercase_model_name}Service.getAll(pageable)).thenReturn(${lowercase_model_name}Page);

        mockMvc.perform(get("${controller_api}/"))
                .andExpect(status().isOk())
		        .andExpect(jsonPath("$", hasSize(2)))
                .andExpect(jsonPath("$.[0].id").value(${lowercase_model_name}Response.getId()))
                .andExpect(jsonPath("$.[1].id").value(Static${model_name}.${lowercase_model_name}DtoResponse2().getId()));
    }

    @Test
    void testGetAll_AnyException_ShouldReturnBadRequest() throws Exception {
        doThrow(new DataAccessException("Database connection failed") {}).when(${lowercase_model_name}Service).getAll(any(Pageable.class));

        mockMvc.perform(get("${controller_api}/"))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.errorMessage").value("Database connection failed"))
                .andExpect(jsonPath("$.timestamp").exists());
    }


    @Test
    void testUpdateById_Success_ShouldReturnOk() throws Exception {
        when(${lowercase_model_name}Service.updateById(any(), any(${class_name}.class))).thenReturn(${lowercase_model_name}Model);

        mockMvc.perform(put("${controller_api}/"+Static${model_name}.ID)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(${lowercase_model_name}Request)))
                .andExpect(status().isCreated())
